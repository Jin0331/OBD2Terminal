// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios16-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name OBDGatewayFramework
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CoreBluetooth
import CoreLocation
import Foundation
@_exported import OBDGatewayFramework
import OSLog
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers final public class OBDService {
  public static let shared: OBDGatewayFramework.OBDService
  final public var connectionType: OBDGatewayFramework.ConnectionType
  final public let onDeviceFoundProperty: Combine.PassthroughSubject<OBDGatewayFramework.BluetoothDeviceList, Swift.Never>
  final public let onDeviceErrorProperty: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  final public let onConnectDeviceProperty: Combine.PassthroughSubject<OBDGatewayFramework.BluetoothDevice, Swift.Never>
  final public let onConnectFailedDeviceProperty: Combine.PassthroughSubject<OBDGatewayFramework.BluetoothDevice, Swift.Never>
  final public let onDisConnectDeviceProperty: Combine.PassthroughSubject<OBDGatewayFramework.BluetoothDevice, Swift.Never>
  final public let onConnectingECUProperty: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  final public let onConnectEcuProperty: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  final public let onConnectFailedECUProperty: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  final public let receiveOBD2LogProperty: Combine.PassthroughSubject<OBDGatewayFramework.OBD2Log, Swift.Never>
  final public let receiveOBD2MessageProperty: Combine.PassthroughSubject<OBDGatewayFramework.PidItemList, Swift.Never>
  final public var accumPidItemList: [OBDGatewayFramework.PidItemList]
  final public func setUpService(connectionType: OBDGatewayFramework.ConnectionType = .bluetooth)
  final public func startScan() async
  final public func stopScan() async
  final public func startConnection(address: Swift.String?, preferedProtocol: OBDGatewayFramework.PROTOCOL? = nil, timeout: Foundation.TimeInterval = 7) async throws -> OBDGatewayFramework.OBDInfo
  final public func reConnection(preferedProtocol: OBDGatewayFramework.PROTOCOL? = nil, timeout: Foundation.TimeInterval = 7) async throws -> OBDGatewayFramework.OBDInfo
  final public func stopConnection() async
  final public func initializeVehicle(_ preferedProtocol: OBDGatewayFramework.PROTOCOL?) async throws -> OBDGatewayFramework.OBDInfo
  final public func startContinuousUpdates(_ pids: [OBDGatewayFramework.OBDCommand], unit: OBDGatewayFramework.MeasurementUnit = .metric, interval: Foundation.TimeInterval = 0.3) -> Combine.AnyPublisher<[OBDGatewayFramework.OBDCommand : OBDGatewayFramework.MeasurementResult], any Swift.Error>
  @discardableResult
  final public func requestPIDs(_ commands: [OBDGatewayFramework.OBDCommand], unit: OBDGatewayFramework.MeasurementUnit, single: Swift.Bool = false) async throws -> [OBDGatewayFramework.OBDCommand : OBDGatewayFramework.MeasurementResult]
  final public func sendATCommand(at: Swift.String) async throws
  final public func setSendPidsList(_ pids: [OBDGatewayFramework.OBDCommand])
  @objc deinit
}
extension OBDGatewayFramework.OBDService {
  @discardableResult
  final public func sendPids() async throws -> OBDGatewayFramework.PidItemList
  final public func getFirstValue<T>(_ stream: _Concurrency.AsyncStream<T>) async -> T?
}
extension OBDGatewayFramework.OBDService {
  final public func initsendingMessage() async
  final public func getSupportedPIDs() async -> [OBDGatewayFramework.OBDCommand]
  final public func scanForTroubleCodes() async throws -> [OBDGatewayFramework.ECUID : [OBDGatewayFramework.TroubleCode]]
  final public func clearTroubleCodes() async throws
  final public func getStatus() async throws -> Swift.Result<OBDGatewayFramework.DecodeResult, OBDGatewayFramework.DecodeError>
  final public func getVINInfo(vin: Swift.String) async throws -> OBDGatewayFramework.VINResults
  final public func addBTList(_ addList: OBDGatewayFramework.BluetoothDeviceList)
}
public enum ECUID : Swift.UInt8, Swift.Codable {
  case engine
  case transmission
  case abs
  case airbag
  case bcm
  case tcm
  case ecm
  case hvac
  case infotainment
  case powerSteering
  case batteryManagement
  case coolingSystem
  case cruiseControl
  case suspension
  case fuelPump
  case lightingControl
  case climateControl
  case steeringControl
  case tirePressureMonitoring
  case vehicleSecurity
  case hybridControl
  case electricMotorControl
  case regenerativeBrakingControl
  case unknown
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum BLEManagerError : Swift.Error, Swift.CustomStringConvertible {
  case missingPeripheralOrCharacteristic
  case unknownCharacteristic
  case scanTimeout
  case sendMessageTimeout
  case stringConversionFailed
  case noData
  case incorrectDataConversion
  case peripheralNotConnected
  case sendingMessagesInProgress
  case timeout
  case peripheralNotFound
  public var description: Swift.String {
    get
  }
  public static func == (a: OBDGatewayFramework.BLEManagerError, b: OBDGatewayFramework.BLEManagerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CANProtocol {
  var elmID: Swift.String { get }
  var name: Swift.String { get }
  func parse(_ lines: [Swift.String]) throws -> [any OBDGatewayFramework.MessageProtocol]
}
public protocol CommProtocol {
  func sendCommand(_ command: Swift.String, retries: Swift.Int) async throws -> [Swift.String]
  func disconnectPeripheral()
  func connectAsync(timeout: Foundation.TimeInterval, address: Swift.String?) async throws
  func scanForPeripherals() async throws
}
public protocol BluetoothScanEventDelegate {
  func onDiscoveryStarted()
  func onDiscoveryFinised()
  func onDeviceFound(device: OBDGatewayFramework.BluetoothDeviceList)
}
public protocol BluetoothConnectionEventDelegate {
  func onOBDLog(logs: Swift.String)
  func onConnectingDevice(device: OBDGatewayFramework.BluetoothDevice)
  func onConnectDevice(device: OBDGatewayFramework.BluetoothDevice)
  func onConnectFailedDevice(device: OBDGatewayFramework.BluetoothDevice)
  func onDisConnectDevice(device: OBDGatewayFramework.BluetoothDevice)
}
public struct LegacyParcer {
  public init(_ lines: [Swift.String]) throws
}
public struct LegacyFrame {
}
public protocol MessageProtocol {
  var data: Foundation.Data? { get }
  var ecu: OBDGatewayFramework.ECUID { get }
}
@_hasMissingDesignatedInitializers public class SAE_J1850_PWM : OBDGatewayFramework.CANProtocol {
  final public let elmID: Swift.String
  final public let name: Swift.String
  public func parse(_ lines: [Swift.String]) throws -> [any OBDGatewayFramework.MessageProtocol]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SAE_J1850_VPW : OBDGatewayFramework.CANProtocol {
  final public let elmID: Swift.String
  final public let name: Swift.String
  public func parse(_ lines: [Swift.String]) throws -> [any OBDGatewayFramework.MessageProtocol]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ISO_9141_2 : OBDGatewayFramework.CANProtocol {
  final public let elmID: Swift.String
  final public let name: Swift.String
  public func parse(_ lines: [Swift.String]) throws -> [any OBDGatewayFramework.MessageProtocol]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ISO_14230_4_KWP_5Baud : OBDGatewayFramework.CANProtocol {
  final public let elmID: Swift.String
  final public let name: Swift.String
  public func parse(_ lines: [Swift.String]) throws -> [any OBDGatewayFramework.MessageProtocol]
  @objc deinit
}
public class ISO_14230_4_KWP_Fast : OBDGatewayFramework.CANProtocol {
  final public let elmID: Swift.String
  final public let name: Swift.String
  public init()
  public func parse(_ lines: [Swift.String]) throws -> [any OBDGatewayFramework.MessageProtocol]
  @objc deinit
}
public enum ConnectionType : Swift.String, Swift.CaseIterable {
  case bluetooth
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OBDGatewayFramework.ConnectionType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [OBDGatewayFramework.ConnectionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum PROTOCOL : Swift.String, Swift.Codable, Swift.CaseIterable {
  case protocol1, protocol2, protocol3, protocol4, protocol5, protocol6, protocol7, protocol8, protocol9, protocolA, protocolB, protocolC, NONE
  public var description: Swift.String {
    get
  }
  public static let asArray: [OBDGatewayFramework.PROTOCOL]
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OBDGatewayFramework.PROTOCOL]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [OBDGatewayFramework.PROTOCOL] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public let protocols: [OBDGatewayFramework.PROTOCOL : any OBDGatewayFramework.CANProtocol]
public struct BatchedResponse {
  public init(response: Foundation.Data, _ unit: OBDGatewayFramework.MeasurementUnit)
  public mutating func extractValue(_ cmd: OBDGatewayFramework.OBDCommand) -> OBDGatewayFramework.MeasurementResult?
}
public struct BluetoothDevice : Swift.Hashable {
  public var name: Swift.String
  public var address: Swift.String
  public var rssi: Swift.Int
  public var lastSeen: Foundation.Date
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OBDGatewayFramework.BluetoothDevice, b: OBDGatewayFramework.BluetoothDevice) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public typealias BluetoothDeviceList = [OBDGatewayFramework.BluetoothDevice]
extension Swift.Array where Element == OBDGatewayFramework.BluetoothDevice {
  public func toBluetoothItemList() -> OBDGatewayFramework.BluetoothItemList
}
public struct BluetoothItem : Swift.Identifiable, Swift.Equatable {
  public let id: Foundation.UUID
  public var name: Swift.String
  public var address: Swift.String
  public var rssi: Swift.Int
  public init(name: Swift.String, address: Swift.String, rssi: Swift.Int)
  public static func == (a: OBDGatewayFramework.BluetoothItem, b: OBDGatewayFramework.BluetoothItem) -> Swift.Bool
  public typealias ID = Foundation.UUID
}
public typealias BluetoothItemList = [OBDGatewayFramework.BluetoothItem]
extension Swift.Array where Element == OBDGatewayFramework.BluetoothItem {
  public var sorted: Swift.Array<OBDGatewayFramework.BluetoothItem> {
    get
  }
}
public struct TroubleCode : Swift.Codable, Swift.Hashable, Swift.Comparable {
  public static func < (lhs: OBDGatewayFramework.TroubleCode, rhs: OBDGatewayFramework.TroubleCode) -> Swift.Bool
  public let code: Swift.String
  public var description: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OBDGatewayFramework.TroubleCode, b: OBDGatewayFramework.TroubleCode) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public let codes: [Swift.String : Swift.String]
public enum DecodeResult {
  case stringResult(Swift.String)
  case statusResult(OBDGatewayFramework.Status)
  case measurementResult(OBDGatewayFramework.MeasurementResult)
  case troubleCode([OBDGatewayFramework.TroubleCode])
  case measurementMonitor(OBDGatewayFramework.Monitor)
}
public struct CommandProperties {
  public let command: Swift.String
  public let description: Swift.String
  public let live: Swift.Bool
  public let maxValue: Swift.Double
  public let minValue: Swift.Double
  public init(_ command: Swift.String, _ description: Swift.String, _ bytes: Swift.Int, _ decoder: OBDGatewayFramework.Decoders, _ live: Swift.Bool = false, maxValue: Swift.Double = 100, minValue: Swift.Double = 0)
  public func decode(data: Foundation.Data, unit: OBDGatewayFramework.MeasurementUnit = .metric) -> Swift.Result<OBDGatewayFramework.DecodeResult, OBDGatewayFramework.DecodeError>
}
public enum OBDCommand : Swift.Codable, Swift.Hashable, Swift.Comparable {
  case general(OBDGatewayFramework.OBDCommand.General)
  case mode1(OBDGatewayFramework.OBDCommand.Mode1)
  case mode3(OBDGatewayFramework.OBDCommand.Mode3)
  case mode6(OBDGatewayFramework.OBDCommand.Mode6)
  case mode9(OBDGatewayFramework.OBDCommand.Mode9)
  case protocols(OBDGatewayFramework.OBDCommand.Protocols)
  public var properties: OBDGatewayFramework.CommandProperties {
    get
  }
  public enum General : Swift.CaseIterable, Swift.Codable, Swift.Comparable {
    case ATD
    case ATZ
    case ATRV
    case ATL0
    case ATL1
    case ATE0
    case ATE1
    case ATH1
    case ATH0
    case ATAT1
    case ATSTFF
    case ATDPN
    public static func == (a: OBDGatewayFramework.OBDCommand.General, b: OBDGatewayFramework.OBDCommand.General) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func < (a: OBDGatewayFramework.OBDCommand.General, b: OBDGatewayFramework.OBDCommand.General) -> Swift.Bool
    public typealias AllCases = [OBDGatewayFramework.OBDCommand.General]
    nonisolated public static var allCases: [OBDGatewayFramework.OBDCommand.General] {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Protocols : Swift.CaseIterable, Swift.Codable, Swift.Comparable {
    case ATSP0
    case ATSP6
    public var properties: OBDGatewayFramework.CommandProperties {
      get
    }
    public static func == (a: OBDGatewayFramework.OBDCommand.Protocols, b: OBDGatewayFramework.OBDCommand.Protocols) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func < (a: OBDGatewayFramework.OBDCommand.Protocols, b: OBDGatewayFramework.OBDCommand.Protocols) -> Swift.Bool
    public typealias AllCases = [OBDGatewayFramework.OBDCommand.Protocols]
    nonisolated public static var allCases: [OBDGatewayFramework.OBDCommand.Protocols] {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Mode1 : Swift.CaseIterable, Swift.Codable, Swift.Comparable {
    case pidsA
    case status
    case freezeDTC
    case fuelStatus
    case engineLoad
    case coolantTemp
    case shortFuelTrim1
    case longFuelTrim1
    case shortFuelTrim2
    case longFuelTrim2
    case fuelPressure
    case intakePressure
    case rpm
    case speed
    case timingAdvance
    case intakeTemp
    case maf
    case throttlePos
    case airStatus
    case O2Sensor
    case O2Bank1Sensor1
    case O2Bank1Sensor2
    case O2Bank1Sensor3
    case O2Bank1Sensor4
    case O2Bank2Sensor1
    case O2Bank2Sensor2
    case O2Bank2Sensor3
    case O2Bank2Sensor4
    case obdcompliance
    case O2SensorsALT
    case auxInputStatus
    case runTime
    case pidsB
    case distanceWMIL
    case fuelRailPressureVac
    case fuelRailPressureDirect
    case O2Sensor1WRVolatage
    case O2Sensor2WRVolatage
    case O2Sensor3WRVolatage
    case O2Sensor4WRVolatage
    case O2Sensor5WRVolatage
    case O2Sensor6WRVolatage
    case O2Sensor7WRVolatage
    case O2Sensor8WRVolatage
    case commandedEGR
    case EGRError
    case evaporativePurge
    case fuelLevel
    case warmUpsSinceDTCCleared
    case distanceSinceDTCCleared
    case evapVaporPressure
    case barometricPressure
    case O2Sensor1WRCurrent
    case O2Sensor2WRCurrent
    case O2Sensor3WRCurrent
    case O2Sensor4WRCurrent
    case O2Sensor5WRCurrent
    case O2Sensor6WRCurrent
    case O2Sensor7WRCurrent
    case O2Sensor8WRCurrent
    case catalystTempB1S1
    case catalystTempB2S1
    case catalystTempB1S2
    case catalystTempB2S2
    case pidsC
    case statusDriveCycle
    case controlModuleVoltage
    case absoluteLoad
    case commandedEquivRatio
    case relativeThrottlePos
    case ambientAirTemp
    case throttlePosB
    case throttlePosC
    case throttlePosD
    case throttlePosE
    case throttlePosF
    case throttleActuator
    case runTimeMIL
    case timeSinceDTCCleared
    case maxValues
    case maxMAF
    case fuelType
    case ethanoPercent
    case evapVaporPressureAbs
    case evapVaporPressureAlt
    case shortO2TrimB1
    case longO2TrimB1
    case shortO2TrimB2
    case longO2TrimB2
    case fuelRailPressureAbs
    case relativeAccelPos
    case hybridBatteryLife
    case engineOilTemp
    case fuelInjectionTiming
    case fuelRate
    case emissionsReq
    public static func == (a: OBDGatewayFramework.OBDCommand.Mode1, b: OBDGatewayFramework.OBDCommand.Mode1) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func < (a: OBDGatewayFramework.OBDCommand.Mode1, b: OBDGatewayFramework.OBDCommand.Mode1) -> Swift.Bool
    public typealias AllCases = [OBDGatewayFramework.OBDCommand.Mode1]
    nonisolated public static var allCases: [OBDGatewayFramework.OBDCommand.Mode1] {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Mode3 : Swift.CaseIterable, Swift.Codable, Swift.Comparable {
    case GET_DTC
    public static func == (a: OBDGatewayFramework.OBDCommand.Mode3, b: OBDGatewayFramework.OBDCommand.Mode3) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func < (a: OBDGatewayFramework.OBDCommand.Mode3, b: OBDGatewayFramework.OBDCommand.Mode3) -> Swift.Bool
    public typealias AllCases = [OBDGatewayFramework.OBDCommand.Mode3]
    nonisolated public static var allCases: [OBDGatewayFramework.OBDCommand.Mode3] {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Mode4 : Swift.CaseIterable, Swift.Codable, Swift.Comparable {
    case CLEAR_DTC
    public static func == (a: OBDGatewayFramework.OBDCommand.Mode4, b: OBDGatewayFramework.OBDCommand.Mode4) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func < (a: OBDGatewayFramework.OBDCommand.Mode4, b: OBDGatewayFramework.OBDCommand.Mode4) -> Swift.Bool
    public typealias AllCases = [OBDGatewayFramework.OBDCommand.Mode4]
    nonisolated public static var allCases: [OBDGatewayFramework.OBDCommand.Mode4] {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Mode6 : Swift.CaseIterable, Swift.Codable, Swift.Comparable {
    case MIDS_A
    case MONITOR_O2_B1S1
    case MONITOR_O2_B1S2
    case MONITOR_O2_B1S3
    case MONITOR_O2_B1S4
    case MONITOR_O2_B2S1
    case MONITOR_O2_B2S2
    case MONITOR_O2_B2S3
    case MONITOR_O2_B2S4
    case MONITOR_O2_B3S1
    case MONITOR_O2_B3S2
    case MONITOR_O2_B3S3
    case MONITOR_O2_B3S4
    case MONITOR_O2_B4S1
    case MONITOR_O2_B4S2
    case MONITOR_O2_B4S3
    case MONITOR_O2_B4S4
    case MIDS_B
    case MONITOR_CATALYST_B1
    case MONITOR_CATALYST_B2
    case MONITOR_CATALYST_B3
    case MONITOR_CATALYST_B4
    case MONITOR_EGR_B1
    case MONITOR_EGR_B2
    case MONITOR_EGR_B3
    case MONITOR_EGR_B4
    case MONITOR_VVT_B1
    case MONITOR_VVT_B2
    case MONITOR_VVT_B3
    case MONITOR_VVT_B4
    case MONITOR_EVAP_150
    case MONITOR_EVAP_090
    case MONITOR_EVAP_040
    case MONITOR_EVAP_020
    case MONITOR_PURGE_FLOW
    case MIDS_C
    case MONITOR_O2_HEATER_B1S1
    case MONITOR_O2_HEATER_B1S2
    case MONITOR_O2_HEATER_B1S3
    case MONITOR_O2_HEATER_B1S4
    case MONITOR_O2_HEATER_B2S1
    case MONITOR_O2_HEATER_B2S2
    case MONITOR_O2_HEATER_B2S3
    case MONITOR_O2_HEATER_B2S4
    case MONITOR_O2_HEATER_B3S1
    case MONITOR_O2_HEATER_B3S2
    case MONITOR_O2_HEATER_B3S3
    case MONITOR_O2_HEATER_B3S4
    case MONITOR_O2_HEATER_B4S1
    case MONITOR_O2_HEATER_B4S2
    case MONITOR_O2_HEATER_B4S3
    case MONITOR_O2_HEATER_B4S4
    case MIDS_D
    case MONITOR_HEATED_CATALYST_B1
    case MONITOR_HEATED_CATALYST_B2
    case MONITOR_HEATED_CATALYST_B3
    case MONITOR_HEATED_CATALYST_B4
    case MONITOR_SECONDARY_AIR_1
    case MONITOR_SECONDARY_AIR_2
    case MONITOR_SECONDARY_AIR_3
    case MONITOR_SECONDARY_AIR_4
    case MIDS_E
    case MONITOR_FUEL_SYSTEM_B1
    case MONITOR_FUEL_SYSTEM_B2
    case MONITOR_FUEL_SYSTEM_B3
    case MONITOR_FUEL_SYSTEM_B4
    case MONITOR_BOOST_PRESSURE_B1
    case MONITOR_BOOST_PRESSURE_B2
    case MONITOR_NOX_ABSORBER_B1
    case MONITOR_NOX_ABSORBER_B2
    case MONITOR_NOX_CATALYST_B1
    case MONITOR_NOX_CATALYST_B2
    case MIDS_F
    case MONITOR_MISFIRE_GENERAL
    case MONITOR_MISFIRE_CYLINDER_1
    case MONITOR_MISFIRE_CYLINDER_2
    case MONITOR_MISFIRE_CYLINDER_3
    case MONITOR_MISFIRE_CYLINDER_4
    case MONITOR_MISFIRE_CYLINDER_5
    case MONITOR_MISFIRE_CYLINDER_6
    case MONITOR_MISFIRE_CYLINDER_7
    case MONITOR_MISFIRE_CYLINDER_8
    case MONITOR_MISFIRE_CYLINDER_9
    case MONITOR_MISFIRE_CYLINDER_10
    case MONITOR_MISFIRE_CYLINDER_11
    case MONITOR_MISFIRE_CYLINDER_12
    case MONITOR_PM_FILTER_B1
    case MONITOR_PM_FILTER_B2
    public static func == (a: OBDGatewayFramework.OBDCommand.Mode6, b: OBDGatewayFramework.OBDCommand.Mode6) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func < (a: OBDGatewayFramework.OBDCommand.Mode6, b: OBDGatewayFramework.OBDCommand.Mode6) -> Swift.Bool
    public typealias AllCases = [OBDGatewayFramework.OBDCommand.Mode6]
    nonisolated public static var allCases: [OBDGatewayFramework.OBDCommand.Mode6] {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Mode9 : Swift.CaseIterable, Swift.Codable, Swift.Comparable {
    case PIDS_9A
    case VIN_MESSAGE_COUNT
    case VIN
    case CALIBRATION_ID_MESSAGE_COUNT
    case CALIBRATION_ID
    case CVN_MESSAGE_COUNT
    case CVN
    public static func == (a: OBDGatewayFramework.OBDCommand.Mode9, b: OBDGatewayFramework.OBDCommand.Mode9) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func < (a: OBDGatewayFramework.OBDCommand.Mode9, b: OBDGatewayFramework.OBDCommand.Mode9) -> Swift.Bool
    public typealias AllCases = [OBDGatewayFramework.OBDCommand.Mode9]
    nonisolated public static var allCases: [OBDGatewayFramework.OBDCommand.Mode9] {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func < (a: OBDGatewayFramework.OBDCommand, b: OBDGatewayFramework.OBDCommand) -> Swift.Bool
  public static func == (a: OBDGatewayFramework.OBDCommand, b: OBDGatewayFramework.OBDCommand) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension OBDGatewayFramework.OBDCommand.General {
  public var properties: OBDGatewayFramework.CommandProperties {
    get
  }
}
extension OBDGatewayFramework.OBDCommand {
  public static func from(command: Swift.String) -> OBDGatewayFramework.OBDCommand?
  public static func fromGeneral(command: Swift.String) -> OBDGatewayFramework.OBDCommand?
  public static func fromMode(command: Swift.String) -> OBDGatewayFramework.OBDCommand?
  public static func fromMode1(command: Swift.String) -> OBDGatewayFramework.OBDCommand?
  public static func fromMode3(command: Swift.String) -> OBDGatewayFramework.OBDCommand?
  public static func fromMode6(command: Swift.String) -> OBDGatewayFramework.OBDCommand?
  public static func fromMode9(command: Swift.String) -> OBDGatewayFramework.OBDCommand?
}
public enum MeasurementUnit : Swift.String, Swift.Codable {
  case metric
  case imperial
  public static var allCases: [OBDGatewayFramework.MeasurementUnit] {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MeasurementResult : Swift.Equatable, Swift.Hashable {
  public let value: Swift.Double
  public let unit: Foundation.Unit
  public static func == (a: OBDGatewayFramework.MeasurementResult, b: OBDGatewayFramework.MeasurementResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Status : Swift.Codable, Swift.Hashable {
  public var dtcCount: Swift.UInt8
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OBDGatewayFramework.Status, b: OBDGatewayFramework.Status) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct BitArray {
}
public enum DecodeError : Swift.Error {
  case invalidData
  case noData
  case decodingFailed(reason: Swift.String)
}
public enum Decoders : Swift.Equatable {
  case pid
  case status
  case singleDTC
  case fuelStatus
  case percent
  case temp
  case percentCentered
  case fuelPressure
  case pressure
  case timingAdvance
  case uas(Swift.UInt8)
  case airStatus
  case o2Sensors
  case sensorVoltage
  case obdCompliance
  case o2SensorsAlt
  case auxInputStatus
  case evapPressure
  case sensorVoltageBig
  case currentCentered
  case absoluteLoad
  case maxMaf
  case fuelType
  case absEvapPressure
  case evapPressureAlt
  case injectTiming
  case dtc
  case fuelRate
  case monitor
  case count
  case cvn
  case encoded_string
  case none
  public static func == (a: OBDGatewayFramework.Decoders, b: OBDGatewayFramework.Decoders) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class Monitor {
  public var tests: [Swift.UInt8 : OBDGatewayFramework.MonitorTest]
  @objc deinit
}
public struct MonitorTest {
}
public struct OBD2Log : Swift.Equatable, Swift.Sendable {
  public var log: [Swift.String]
  public init(log: [Swift.String])
  public mutating func append(_ log: Swift.String)
  public static func == (a: OBDGatewayFramework.OBD2Log, b: OBDGatewayFramework.OBD2Log) -> Swift.Bool
}
public enum ECUHeader {
}
public struct OBDInfo : Swift.Codable, Swift.Hashable {
  public var vin: Swift.String?
  public var supportedPIDs: [OBDGatewayFramework.OBDCommand]?
  public var obdProtocol: OBDGatewayFramework.PROTOCOL?
  public var ecuMap: [Swift.UInt8 : OBDGatewayFramework.ECUID]?
  public init(vin: Swift.String? = nil, supportedPIDs: [OBDGatewayFramework.OBDCommand]? = nil, obdProtocol: OBDGatewayFramework.PROTOCOL? = nil, ecuMap: [Swift.UInt8 : OBDGatewayFramework.ECUID]? = nil)
  public var supportedPIDsToString: [OBDGatewayFramework.OBDCommand] {
    get
  }
  public var supportedPidsMode1: [OBDGatewayFramework.OBDCommand] {
    get
  }
  public var supportedPidsMode3: [OBDGatewayFramework.OBDCommand] {
    get
  }
  public var supportedPidsMode6: [OBDGatewayFramework.OBDCommand] {
    get
  }
  public var supportedPidsMode9: [OBDGatewayFramework.OBDCommand] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OBDGatewayFramework.OBDInfo, b: OBDGatewayFramework.OBDInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct CommonItem : Swift.Equatable, Swift.Hashable {
  public let timestamp: Foundation.Date
  public init()
  public static func == (a: OBDGatewayFramework.CommonItem, b: OBDGatewayFramework.CommonItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct GPSItem : Swift.Equatable, Swift.Hashable {
  public var altitude: Swift.Double
  public var latitude: Swift.Double
  public var logitude: Swift.Double
  public init()
  public static func == (a: OBDGatewayFramework.GPSItem, b: OBDGatewayFramework.GPSItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PidItem : Swift.Equatable, Swift.Hashable {
  public let data: [Swift.String : OBDGatewayFramework.MeasurementResult]
  public init(data: [Swift.String : OBDGatewayFramework.MeasurementResult])
  public var pid: Swift.String {
    get
  }
  public var value: Swift.Double {
    get
  }
  public var unit: Swift.String {
    get
  }
  public static func == (a: OBDGatewayFramework.PidItem, b: OBDGatewayFramework.PidItem) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PidItemList : Swift.Equatable {
  public var common: OBDGatewayFramework.CommonItem
  public var data: [OBDGatewayFramework.PidItem]
  public var gps: OBDGatewayFramework.GPSItem
  public init()
  public static func == (a: OBDGatewayFramework.PidItemList, b: OBDGatewayFramework.PidItemList) -> Swift.Bool
}
public struct VINResults : Swift.Codable {
  public let Results: [OBDGatewayFramework.VINInfo]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct VINInfo : Swift.Codable, Swift.Hashable {
  public let Make: Swift.String
  public let Model: Swift.String
  public let ModelYear: Swift.String
  public let EngineCylinders: Swift.String
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: OBDGatewayFramework.VINInfo, b: OBDGatewayFramework.VINInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public enum ELMManagerError : Swift.Error, Foundation.LocalizedError {
  case noProtocolFound
  case invalidResponse(message: Swift.String)
  case adapterInitializationFailed
  case ignitionOff
  case invalidProtocol
  case timeout
  case connectionFailed(reason: Swift.String)
  case unknownError
  public var errorDescription: Swift.String? {
    get
  }
}
public enum OBDServiceError : Swift.Error {
  case noAdapterFound
  case notConnectedToVehicle
  case adapterConnectionFailed(underlyingError: any Swift.Error)
  case scanFailed(underlyingError: any Swift.Error)
  case clearFailed(underlyingError: any Swift.Error)
  case commandFailed(command: Swift.String, error: any Swift.Error)
  case initializeVehicle(underlyingError: any Swift.Error)
}
@_hasMissingDesignatedInitializers final public class VersionInfo {
  public static let number: Swift.String
  public static func printModuleInfo()
  @objc deinit
}
extension OBDGatewayFramework.OBDService : OBDGatewayFramework.BluetoothScanEventDelegate {
  final public func onDiscoveryStarted()
  final public func onDiscoveryFinised()
  final public func onDeviceFound(device: OBDGatewayFramework.BluetoothDeviceList)
}
extension OBDGatewayFramework.OBDService : OBDGatewayFramework.BluetoothConnectionEventDelegate {
  final public func onConnectingDevice(device: OBDGatewayFramework.BluetoothDevice)
  final public func onConnectDevice(device: OBDGatewayFramework.BluetoothDevice)
  final public func onConnectFailedDevice(device: OBDGatewayFramework.BluetoothDevice)
  final public func onDisConnectDevice(device: OBDGatewayFramework.BluetoothDevice)
  final public func onOBDLog(logs: Swift.String)
}
extension OBDGatewayFramework.ECUID : Swift.Equatable {}
extension OBDGatewayFramework.ECUID : Swift.Hashable {}
extension OBDGatewayFramework.ECUID : Swift.RawRepresentable {}
extension OBDGatewayFramework.BLEManagerError : Swift.Equatable {}
extension OBDGatewayFramework.BLEManagerError : Swift.Hashable {}
extension OBDGatewayFramework.ConnectionType : Swift.Equatable {}
extension OBDGatewayFramework.ConnectionType : Swift.Hashable {}
extension OBDGatewayFramework.ConnectionType : Swift.RawRepresentable {}
extension OBDGatewayFramework.PROTOCOL : Swift.Equatable {}
extension OBDGatewayFramework.PROTOCOL : Swift.Hashable {}
extension OBDGatewayFramework.PROTOCOL : Swift.RawRepresentable {}
extension OBDGatewayFramework.OBDCommand.General : Swift.Hashable {}
extension OBDGatewayFramework.OBDCommand.Protocols : Swift.Hashable {}
extension OBDGatewayFramework.OBDCommand.Mode1 : Swift.Hashable {}
extension OBDGatewayFramework.OBDCommand.Mode3 : Swift.Hashable {}
extension OBDGatewayFramework.OBDCommand.Mode4 : Swift.Hashable {}
extension OBDGatewayFramework.OBDCommand.Mode6 : Swift.Hashable {}
extension OBDGatewayFramework.OBDCommand.Mode9 : Swift.Hashable {}
extension OBDGatewayFramework.MeasurementUnit : Swift.Equatable {}
extension OBDGatewayFramework.MeasurementUnit : Swift.Hashable {}
extension OBDGatewayFramework.MeasurementUnit : Swift.RawRepresentable {}
